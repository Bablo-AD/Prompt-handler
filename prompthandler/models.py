import openai
import os

class openai_chat_gpt:
    """
    This class represents interacting with the GPT-3.5-turbo model (or other OpenAI models).

    Attributes:
        api_key (str): The OpenAI API key.
        model (str): The name of the OpenAI model to use.
        MAX_TOKEN (int): The maximum number of tokens allowed for the generated completion.
        temperature (float): The temperature parameter controlling the randomness of the output.
    """

    def __init__(self, api_key=None, MAX_TOKEN=4096, temperature=0, model="gpt-3.5-turbo-0613"):
        """
        Initializes the OpenAI chat model with the provided settings.

        Args:
            api_key (str): The OpenAI API key.
            MAX_TOKEN (int): The maximum number of tokens allowed for the generated completion.
            temperature (float): The temperature parameter controlling the randomness of the output.
            model (str): The name of the OpenAI model to use.
        """
        self.api_key = api_key
        self.model = model
        self.MAX_TOKEN = MAX_TOKEN
        self.temperature = temperature
        if api_key is not None:
            openai.api_key = self.api_key

    def get_completion_for_message(self, message, temperature=None):
        """
        Generates a completion for a given message using the specified OpenAI model.

        Args:
            message (list): List of messages representing the conversation history.
            temperature (float): Control the randomness of the output. If not provided, it uses the default temperature.

        Returns:
            str: The completion generated by the model.
            int: The number of tokens used by the completion.
        """
        if temperature is None:
            temperature = self.temperature
        completion = openai.ChatCompletion.create(
            model=self.model,
            messages=message,
            temperature=temperature
        )
        return completion.choices[0].message['content'], completion['usage']['prompt_tokens']
